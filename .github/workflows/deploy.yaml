name: Build and Deploy Workload ID Demo

on:
  push:
    branches: [ main, 'thedevelopnik/**' ]
    paths:
      - 'web/**'
      - 'backend/**'
      - 'charts/**'
      - 'ansible/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'web/**'
      - 'backend/**'

env:
  ECR_REGISTRY: 668558765449.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: mwi-demo-10bbb2a
  AWS_REGION: us-west-2
  AWS_PROFILE: w2w-demo-deployment

jobs:
  # Build and push Docker images
  # build:
  #   name: Build Docker Images
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   outputs:
  #     backend-image: ${{ steps.build-backend.outputs.image }}
  #     web-image: ${{ steps.build-web.outputs.image }}
  #     image-tag: ${{ steps.meta.outputs.tag }}
    
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #       with:
  #         platforms: linux/amd64,linux/arm64

  #     - name: Generate image metadata
  #       id: meta
  #       run: |
  #         TAG=${GITHUB_SHA::8}
  #         if [[ "${{ github.event_name }}" == "pull_request" ]]; then
  #           TAG="pr-${{ github.event.number }}-${TAG}"
  #         fi
  #         echo "tag=${TAG}" >> $GITHUB_OUTPUT
  #         echo "Generated tag: ${TAG}"

  #     - name: Setup AWS helpers
  #       run: |
  #         wget https://rolesanywhere.amazonaws.com/releases/1.5.0/X86_64/Linux/aws_signing_helper
  #         chmod +x aws_signing_helper
  #         wget https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/0.10.1/linux-amd64/docker-credential-ecr-login
  #         mv docker-credential-ecr-login /usr/local/bin/
  #         chmod +x /usr/local/bin/docker-credential-ecr-login

  #     - name: Fetch Teleport binaries
  #       uses: teleport-actions/setup@v1
  #       with:
  #         version: 17.5.2

  #     - name: Authenticate with Teleport
  #       run: |
  #         tbot start --oneshot -c ./action_support/bot.yaml
  #         openssl x509 -text -in ./svid-out/svid.pem

  #     - name: Configure AWS credentials
  #       run: |
  #         mkdir -p /home/runner/.aws
  #         cp ./action_support/aws_config /home/runner/.aws/config
  #         cp ./action_support/docker_config.json /home/runner/.docker/config.json

  #     - name: Build and push backend image (multi-arch)
  #       id: build-backend
  #       run: |
  #         IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:backend-${{ steps.meta.outputs.tag }}"
  #         docker buildx build \
  #           --platform linux/amd64,linux/arm64 \
  #           --push \
  #           -t $IMAGE_URI \
  #           --cache-from type=gha \
  #           --cache-to type=gha,mode=max \
  #           ./backend
  #         echo "image=${IMAGE_URI}" >> $GITHUB_OUTPUT
  #         echo "Built multi-arch backend image: ${IMAGE_URI}"

      # - name: Build and push web image (multi-arch)
      #   id: build-web
      #   run: |
      #     IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:web-${{ steps.meta.outputs.tag }}"
      #     docker buildx build \
      #       --platform linux/amd64,linux/arm64 \
      #       --push \
      #       -t $IMAGE_URI \
      #       --cache-from type=gha \
      #       --cache-to type=gha,mode=max \
      #       ./web
      #     echo "image=${IMAGE_URI}" >> $GITHUB_OUTPUT
      #     echo "Built multi-arch web image: ${IMAGE_URI}"

  # Deploy using Helm (for Kubernetes deployments)
  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    # needs: build
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.18.3'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.32'

      - name: Fetch Teleport binaries
        uses: teleport-actions/setup@v1
        with:
          version: 17.5.2

      - name: Authenticate with Teleport
        run: |
          tbot start --oneshot -c ./action_support/bot.yaml

      - name: Deploy tbot DaemonSet
        run: |
          helm upgrade --install tbot ./charts/tbot \
            --namespace tbot \
            --values ./charts/tbot/values.yaml \
            --kubeconfig /home/runner/work/workload-id-demo/workload-id-demo/k8s-out/config

  #     - name: Deploy backend application
  #       run: |
  #         helm upgrade --install backend-1 ./charts/backend \
  #           --namespace workload-identity \
  #           --values ./charts/backend/values-backend-1.yaml \
  #           --set image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
  #           --set image.tag="backend-${{ needs.build.outputs.image-tag }}" \
  #           --kubeconfig /home/runner/work/workload-id-demo/workload-id-demo/k8s-out/config

  #     - name: Deploy second backend instance
  #       run: |
  #         helm upgrade --install backend-2 ./charts/backend \
  #           --namespace workload-identity \
  #           --values ./charts/backend/values-backend-2.yaml \
  #           --set image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
  #           --set image.tag="backend-${{ needs.build.outputs.image-tag }}" \
  #           --kubeconfig /home/runner/work/workload-id-demo/workload-id-demo/k8s-out/config
  
  # Deploy using Ansible (for VM deployments)
  # deploy-ansible:
  #   name: Deploy with Ansible
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name != 'pull_request'
  #   permissions:
  #     id-token: write
  #     contents: read
    
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'

  #     - name: Install Ansible
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install ansible

  #     - name: Setup Teleport authentication
  #       run: |
  #         wget https://rolesanywhere.amazonaws.com/releases/1.5.0/X86_64/Linux/aws_signing_helper
  #         chmod +x aws_signing_helper

  #     - name: Fetch Teleport binaries
  #       uses: teleport-actions/setup@v1
  #       with:
  #         version: 17.5.2

  #     - name: Authenticate with Teleport
  #       run: |
  #         tbot start --oneshot -c ./action_support/bot.yaml

  #     - name: Deploy ghostunnel
  #       env:
  #         ANSIBLE_CONFIG: ./action_support/ansible.cfg
  #       run: |
  #         ansible-playbook -i ansible/hosts ansible/ghostunnel.yml

  #     - name: Deploy web application
  #       env:
  #         ANSIBLE_CONFIG: ./action_support/ansible.cfg
  #       run: |
  #         ansible-playbook -i ansible/hosts ansible/web.yml \
  #           -e "image_uri=${{ needs.build.outputs.web-image }}"
