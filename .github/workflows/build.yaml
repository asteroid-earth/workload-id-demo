name: Build Docker Images

on:
  pull_request:
    branches: [ main, 'thedevelopnik/**' ]
    paths:
      - 'web/**'
      - 'backend/**'
      - '.github/workflows/build.yaml'
  push:
    branches: [ develop, 'feature/**' ]
    paths:
      - 'web/**'
      - 'backend/**'

env:
  ECR_REGISTRY: 668558765449.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: mwi-demo-10bbb2a
  AWS_REGION: us-west-2

jobs:
  build-test:
    name: Build and Test Images
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,darwin/arm64

      - name: Generate image metadata
        id: meta
        run: |
          TAG=${GITHUB_SHA::8}
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG="pr-${{ github.event.number }}-${TAG}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

      - name: Build backend image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64,darwin/arm64
          push: false
          tags: workload-backend:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build web image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./web
          platforms: linux/amd64,linux/arm64,darwin/arm64
          push: false
          tags: workload-web:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build summary
        run: |
          echo "‚úÖ Backend image built successfully for linux/amd64, linux/arm64, darwin/arm64"
          echo "‚úÖ Web image built successfully for linux/amd64, linux/arm64, darwin/arm64"

      # - name: Build single-arch images for testing
      #   run: |
      #     # Build linux/amd64 images for local testing and security scanning
      #     docker buildx build --platform linux/amd64 --load -t workload-backend:${{ steps.meta.outputs.tag }}-amd64 ./backend
      #     docker buildx build --platform linux/amd64 --load -t workload-web:${{ steps.meta.outputs.tag }}-amd64 ./web
      #     echo "‚úÖ Single-arch test images built"

      # - name: Test container functionality
      #   run: |
      #     # Test backend container
      #     docker run --rm -d --name test-backend -p 8080:8080 workload-backend:${{ steps.meta.outputs.tag }}-amd64
      #     sleep 5
      #     if docker ps | grep test-backend; then
      #       echo "‚úÖ Backend container is running"
      #       docker stop test-backend
      #     else
      #       echo "‚ùå Backend container failed to start"
      #       docker logs test-backend || true
      #       exit 1
      #     fi

      #     # Test web container
      #     docker run --rm -d --name test-web -p 8081:8080 workload-web:${{ steps.meta.outputs.tag }}-amd64
      #     sleep 5
      #     if docker ps | grep test-web; then
      #       echo "‚úÖ Web container is running"
      #       docker stop test-web
      #     else
      #       echo "‚ùå Web container failed to start"
      #       docker logs test-web || true
      #       exit 1
      #     fi

      # - name: Run security scan on images
      #   run: |
      #     # Install Trivy
      #     sudo apt-get update
      #     sudo apt-get install wget apt-transport-https gnupg lsb-release -y
      #     wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #     echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
      #     sudo apt-get update
      #     sudo apt-get install trivy -y
          
      #     # Scan images (using amd64 versions for scanning)
      #     echo "üîç Scanning backend image..."
      #     trivy image --exit-code 0 --severity HIGH,CRITICAL workload-backend:${{ steps.meta.outputs.tag }}-amd64
          
      #     echo "üîç Scanning web image..."
      #     trivy image --exit-code 0 --severity HIGH,CRITICAL workload-web:${{ steps.meta.outputs.tag }}-amd64

      # - name: Comment PR with build results
      #   if: github.event_name == 'pull_request'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const output = `
      #       ## üöÄ Multi-Architecture Build Results
            
      #       ‚úÖ **Backend image**: Built successfully for linux/amd64, linux/arm64, darwin/arm64
      #       ‚úÖ **Web image**: Built successfully for linux/amd64, linux/arm64, darwin/arm64
      #       ‚úÖ **Container tests**: Passed (linux/amd64)
      #       ‚úÖ **Security scan**: Completed (linux/amd64)
            
      #       **Image tag**: \`${{ steps.meta.outputs.tag }}\`
      #       **Commit**: \`${{ github.sha }}\`
      #       **Platforms**: linux/amd64, linux/arm64, darwin/arm64
      #       `;
            
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });
